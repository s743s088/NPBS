NPBS
====

Non-parametric Bootstrapping Code

BEFORE USING THIS CODE:

--> Need fasta file of the transcriptome being mapped to

-->Transcripts need to be named numerically:
    - i.e. TRANSCRIPT_PREFIX_1, TRANSCRIPT_PREFIX_2, TRANSCRIPT_PREFIX_3, .... 
    - use Format_Assembly.py script to do this

-->Map raw reads to reformatted transcriptome (We used bowtie2)

-->Need csv file that summarizes expression values:
    -ex: contig,length,Sample1,Sample2,Sample3,Sample1 normalized,Sample2 normalized,Sample3 normalized
         hyd_paired_contig_1,1102,1553,6374,2758,1.13723836424e-08,3.40819185565e-08,2.20808211639e-08
         hyd_paired_contig_10,274,17,6908,42544,5.00679718456e-10,1.48557757744e-07,1.36990455644e-06
         hyd_paired_contig_100,344,173,16225,20364,4.05834815565e-09,2.77920020147e-07,5.22284573929e-07
         etc...

-->Need a separate file that has just the Sam header from the mapping program
    - ex: @SQ    SN:hyd_paired_contig_1	LN:1102
          @SQ	 SN:hyd_paired_contig_2	LN:1762
          @SQ  	 SN:hyd_paired_contig_3	LN:1457
          @SQ	 SN:hyd_paired_contig_4	LN:2262
          @SQ	 SN:hyd_paired_contig_5	LN:264
          etc...

Pipeline:

- run Format_Assembly.py on your assembly.
- use bowtie2 with your reformatted assembly to get .sam file 
- run the Preprocess_Map_file.py script on all of you mapping files. 
- run NPBS.cpp on all of the output files from the previous python script: should get 10 bootstrap files per text file
- run Significant_tests.py on any two libraries you wish to compare

FYI, all of these scripts require some editing depending on the TRANSCRIPT_PREFIX you chose and
the names of the input and output files used for the mapping program and in previous scripts.
